HLA ={}
if 'subject' in config:
	for subject in config['subject']:
		for library in config['subject'][subject]:
			if config['sample_captures'][library] not in config['Panel_List']:
				TARGET    += [subject+"/"+TIME+"/"+library+"/HLA/seq2HLA/"+library+"-ClassI.HLAgenotype4digits"]
				TARGET    += [subject+"/"+TIME+"/"+library+"/HLA/HLAminer/HLAminer_HPTASR.csv"]
				TARGET    += [subject+"/"+TIME+"/"+library+"/HLA/"+library+".Calls.txt"]
if 'sample_references' in config:
	if len(config['sample_references']) > 0:
		for Tumor in config['sample_references']:
			for Normal in config['sample_references'][Tumor]:
				seq2HLA    = "{subject}/{TIME}/{sample}/HLA/seq2HLA/{sample}-ClassI.HLAgenotype4digits".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[Normal], sample=Normal)
				HLAminer   = "{subject}/{TIME}/{sample}/HLA/HLAminer/HLAminer_HPTASR.csv".format(TIME=TIME, subject=SAMPLE_TO_SUBJECT[Normal], sample=Normal)
				if config['sample_captures'][Tumor] not in config['Panel_List']:
					# any output which is desired on all somatic libraries but Panel goes here, the list of panel captures should be maintained in the Panel_List in config file
					HLA[Tumor] = [seq2HLA, HLAminer]
	for sample in config['sample_references'].keys():
		subject=SAMPLE_TO_SUBJECT[sample]
		if config['sample_captures'][sample] not in config['Panel_List']:
			#TARGET    +=[subject+"/"+TIME+"/"+sample+"/NeoAntigen/MHC_Class_I/"+sample+".final.tsv"]
			TARGET    +=[subject+"/"+TIME+"/"+sample+"/NeoAntigen/"+sample+".final.txt"]

if 'RNASeq' in config:
	for subject  in config['RNASeq'].keys():
		for sample in SAM_RNASEQ[subject]:
			TARGET    +=  [subject+"/"+TIME+"/"+sample+"/HLA/seq2HLA/"+sample+"-ClassI.HLAgenotype4digits"]
			TARGET    +=  [subject+"/"+TIME+"/"+sample+"/HLA/HLAminer/HLAminer_HPTASR.csv"]
			TARGET    +=  [subject+"/"+TIME+"/"+sample+"/HLA/"+sample+".Calls.txt"]

############
#	seq2HLA
############
rule seq2HLA:
	input:  R=lambda wildcards: FQ[wildcards.sample],
	output:
		"{base}/{TIME}/{sample}/HLA/seq2HLA/{sample}-ClassI.HLAgenotype4digits"
	envmodules:
		config["version_python"],
		config['version_R'],
		config['bowtie']
	params:
		rulename= "seq2HLA",
		batch	= config[config['host']]["job_hla"],
		HLA	= config['HLA'],
		script = config['app_home'] + "/seq2HLA/seq2HLA.py"
	shell: """
	#######################
	python {params.script} {params.HLA}/seq2HLA/ -1 {input.R[0]} -2 {input.R[1]}  -p ${{THREADS}} -r {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/seq2HLA/{wildcards.sample}
	#######################
	"""
############
#	HLAminer
############
rule HLAminer:
	input:	R=lambda wildcards: FQ[wildcards.sample],
	output: "{base}/{TIME}/{sample}/HLA/HLAminer/HLAminer_HPTASR.csv"
	params:
		rulename="HLAminer",
		batch	=config[config['host']]["job_hlaminer"],
		HLA	=config['HLA'],
		workdir=WORK_DIR,
		location=NGS_PIPELINE,
		script_home = config['app_home'] + "/HLAminer_v1.3.1/bin/"
	shell: """
	#######################
	#echo {params.workdir}/{input.R[0]} >{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof
	#echo {params.workdir}/{input.R[1]} >>{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof

	echo {input.R[0]} >{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof
	echo {input.R[1]} >>{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/patient.fof
	
	sh {params.script_home}HPTASRwgs_classI.sh {params.script_home} {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/HLA/HLAminer/
	#######################
	"""
############
##       MergeHLA Calls
#############
rule MergeHLA:
	input:
		A="{base}/{TIME}/{sample}/HLA/HLAminer/HLAminer_HPTASR.csv",
		B="{base}/{TIME}/{sample}/HLA/seq2HLA/{sample}-ClassI.HLAgenotype4digits",
	output:
		"{base}/{TIME}/{sample}/HLA/{sample}.Calls.txt"
	params:
		rulename = "MergeHLA",
		Tool=NGS_PIPELINE + "/scripts/consensusHLA.pl",
		batch    = config[config['host']]["job_default"]
	shell: """
	#######################
	export LC_ALL=C
	perl {params.Tool} {input.B} {input.A} | sort > {output}	
	#######################
	"""
############
#	VEP4pVACSeq
############
rule VEP:
	input:
		"{base}/{TIME}/{sample}/calls/{sample}.strelka.indels.raw.vcf",
		"{base}/{TIME}/{sample}/calls/{sample}.strelka.snvs.raw.vcf",
		"{base}/{TIME}/{sample}/calls/{sample}.MuTect.raw.vcf",
		HLA  =lambda wildcards: HLA[wildcards.sample],
		tool =NGS_PIPELINE + "/scripts/consensusSomaticVCF.pl",
	envmodules:
		config["vcftools"],
		config['VEP'],
		"perl"
	output: 
		vcf	="{base}/{TIME}/{sample}/NeoAntigen/{sample}.final.vcf",
	params:
		rulename = "VEP",
		merge=NGS_PIPELINE + "/scripts/consensusHLA.pl",
		normal	 = lambda wildcards: config['sample_references'][wildcards.sample][0],
		batch    = config[config['host']]["job_VEP"],
	shell: """
	#######################
	perl {input.tool} -vcf {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/calls/{wildcards.sample}.strelka.indels.raw.vcf,{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/calls/{wildcards.sample}.strelka.snvs.raw.vcf,{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/calls/{wildcards.sample}.MuTect.raw.vcf -order {params.normal},{wildcards.sample} -filter REJECT |vcf-subset -u -c {wildcards.sample} >{output.vcf}.tmp
	variant_effect_predictor.pl -i {output.vcf}.tmp --plugin Downstream --plugin Wildtype --terms SO --offline --cache --dir_cache $VEPCACHEDIR --assembly GRCh37 --output_file {output.vcf} --vcf --force_overwrite
	rm -rf {output.vcf}.tmp
	export LC_ALL=C
	perl {params.merge} {input.HLA[0]} {input.HLA[1]} | sort > {wildcards.base}/{wildcards.TIME}/{params.normal}/HLA/{params.normal}.Calls.txt
	#######################
	"""


###########
#       split_vcf
###########
checkpoint split_vcf:
	input:
		lambda wildcards: "{base}/{TIME}/" +config['sample_references'][wildcards.sample][0]+"/HLA/" +config['sample_references'][wildcards.sample][0]+".Calls.txt",
		vcf = "{base}/{TIME}/{sample}/NeoAntigen/{sample}.final.vcf",
	output:
		out = directory("{base}/{TIME}/{sample}/NeoAntigen/split"),
	envmodules:
		config["VEP"],
		config["vcftools"],
		config["bcftools"]
	params:
		rulename = "split_vcf",
		tool     = NGS_PIPELINE + "/scripts/split_vcf.py",
		batch    = config[config['host']]["job_VEP"],
	shell: """
	########################
	mkdir -p {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/split

		python {params.tool} {input.vcf} {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/split/

	#########################
	"""
############
#       pVACSeq
#############
rule pVACseq:
	input:
		vcf = "{base}/{TIME}/{sample}/NeoAntigen/split/{sample}_{i}.vcf",
	output:
		"{base}/{TIME}/{sample}/NeoAntigen/split/{sample}_{i}/MHC_Class_I/{sample}_{i}.filtered.tsv"
	envmodules:
		config['pvacseq'],
		config["version_python"],
	params:
		rulename = "pVACseq",
		normal   = lambda wildcards: config['sample_references'][wildcards.sample][0],
		tool 	 = NGS_PIPELINE + "/scripts/pvacseq.sh",
		IEDB	 = config['IEDB'],
		batch    = config[config['host']]["job_pvacseq"],
		host	 = config['host']
	shell: """
	#######################
	
	mkdir -p {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/split/{wildcards.sample}_{wildcards.i}
	{params.tool} {wildcards.base}/{wildcards.TIME}/{params.normal}/HLA/{params.normal}.Calls.txt {input.vcf} {wildcards.sample}_{wildcards.i} {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/split/{wildcards.sample}_{wildcards.i}

	if [ -f {output} ]
	then
		echo "pVACSeq step is complete"
	else
		touch {output}
	fi
	#######################
	"""

def aggregate_input(wildcards):
	checkpoint_output = checkpoints.split_vcf.get(sample=wildcards.sample,base = wildcards.base, TIME = wildcards.TIME).output[0]
	return expand("{base}/{TIME}/{sample}/NeoAntigen/split/{sample}_{i}/MHC_Class_I/{sample}_{i}.filtered.tsv",base = wildcards.base, TIME = wildcards.TIME, sample = wildcards.sample, i=glob_wildcards(os.path.join(checkpoint_output, "{sample}_{i}.vcf")).i)


#############
#	Merge_pvacseq
#############
rule Merge_pvacseq:
	input:
		aggregate_input
	output:
		"{base}/{TIME}/{sample}/NeoAntigen/{sample}.final.txt"
	envmodules: config['pvacseq']
	params:
		rulename = "Merge_pvacseq",
		tool     = NGS_PIPELINE + "/scripts/process_pVACSeq.pl",
		batch    = config[config['host']]["job_pvacseq"],
		host	= config['host']
	shell: """
	##################
	awk 'FNR>1 || NR==1' {input} > {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/{wildcards.sample}.filtered.tsv
	awk 'NR == 1; NR > 1 {{print $0 | "sort -n"}}' {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/{wildcards.sample}.filtered.tsv |uniq > {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/{wildcards.sample}.final.uniq.tsv
	perl {params.tool} {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/{wildcards.sample}.final.uniq.tsv |awk 'NR == 1; NR > 1 {{print $0 | "sort -n"}}'|uniq > {output}
	chgrp khanlab {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/NeoAntigen/{wildcards.sample}.final.txt
	##################
	"""
